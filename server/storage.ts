import { type InsertServer, type Server } from "@shared/schema";
import { MongoClient } from "mongodb";

// modify the interface with any CRUD methods
// you might need

export interface IStorage {
  // getUser(id: number): Promise<User | undefined>; // Removed
  // getUserByUsername(username: string): Promise<User | undefined>; // Removed
  // createUser(user: InsertUser): Promise<User>; // Removed
  createServer(serverData: InsertServer): Promise<Server>;
}

export class MemStorage implements IStorage {
  // private users: Map<number, User>; // Removed
  private servers: Map<string, Server>; // Changed to string for ObjectId
  // currentId: number; // Removed
  // currentServerId: number; // No longer needed as MongoDB handles ID
  private mongoClient: MongoClient;
  private readonly mongoDbName = "modl";

  constructor() {
    // this.users = new Map(); // Removed
    this.servers = new Map();
    // this.currentId = 1; // Removed
    // this.currentServerId = 1;
    // Replace with your MongoDB connection string
    const uri = process.env.MONGODB_URI || "mongodb://localhost:27017";
    this.mongoClient = new MongoClient(uri);
    this.connectMongo();
  }

  private async connectMongo() {
    try {
      await this.mongoClient.connect();
      console.log("Connected to MongoDB");
    } catch (error) {
      console.error("Failed to connect to MongoDB", error);
      // In a real application, you might want to throw an error or implement retry logic
    }
  }

  // async getUser(id: number): Promise<User | undefined> { // Removed
  //   return this.users.get(id);
  // }

  // async getUserByUsername(username: string): Promise<User | undefined> { // Removed
  //   return Array.from(this.users.values()).find(
  //     (user) => user.username === username,
  //   );
  // }

  // async createUser(insertUser: InsertUser): Promise<User> { // Removed
  //   const id = this.currentId++;
  //   const user: User = { ...insertUser, id };
  //   this.users.set(id, user);
  //   return user;
  // }

  async createServer(serverData: InsertServer): Promise<Server> {
    const db = this.mongoClient.db(this.mongoDbName);
    const serversCollection = db.collection("servers");

    const databaseName = `server_${serverData.serverName.toLowerCase().replace(/\s+/g, '_')}`;

    const newServerDocument = {
      ...serverData,
      databaseName,
      // _id is now generated by MongoDB
    };

    const result = await serversCollection.insertOne(newServerDocument);
    const insertedId = result.insertedId; // Get the ObjectId generated by MongoDB

    // Create a new database for the server
    // Note: MongoDB creates databases and collections on first insert if they don't exist.
    // So, we can just switch to the new DB and create a dummy collection or let it be created on first use.
    const newServerDb = this.mongoClient.db(databaseName);
    // Optionally create a dummy collection to ensure DB creation
    await newServerDb.createCollection("initial_collection");
    console.log(`Database ${databaseName} created for server ${serverData.serverName}`);

    const server: Server = {
      id: insertedId.toHexString(), // Store ObjectId as string
      ...serverData,
      databaseName,
    };
    // this.servers.set(insertedId.toHexString(), server); // Also keep in-memory if needed, or rely solely on MongoDB
    return server;
  }
}

export const storage = new MemStorage();
